
# text = ¿:<PUNCT> Quiénes:<PRON> son:<AUX> ?:<PUNCT> 
# analyses = 2
# parsetree = (Utt (parenth '¿') (Utt (QS (IP Quiénes) (VP (aux son)))) (parenth '?'))
1	¿	_	PUNCT	_	_	3	punct	_	_
2	Quiénes	_	PRON	_	_	3	nsubj	_	_
3	son	_	AUX	_	_	0	root	_	_
4	?	_	PUNCT	_	_	3	punct	_	_



# text = Una:<DET> pequeña:<ADJ> ciudad:<NOUN> con:<ADP> dos:<NUM> minaretes:<NOUN> pasa:<VERB> deslizándose:<VERB> .:<PUNCT> 
# analyses = 104
# parsetree = (Utt (Utt (S (SC (S_that (S (NP (NP (Det Una) (CN (AP (A pequeña)) (CN (N ciudad)))) (NP_obl (Prep con) (NP (Num (Card dos)) (NP (CN (N minaretes)))))) (VP (V pasa))))) (VP (V deslizándose)))) (Punct '.'))
1	Una	_	DET	_	_	3	det	_	_
2	pequeña	_	ADJ	_	_	3	amod	_	_
3	ciudad	_	NOUN	_	_	7	nsubj	_	_
4	con	_	ADP	_	_	6	case	_	_
5	dos	_	NUM	_	_	6	nummod	_	_
6	minaretes	_	NOUN	_	_	3	nmod	_	_
7	pasa	_	VERB	_	_	8	csubj	_	_
8	deslizándose	_	VERB	_	_	0	root	_	_
9	.	_	PUNCT	_	_	8	punct	_	_



# text = Yo:<PRON> era:<AUX> solamente:<ADV> un:<DET> chico:<NOUN> con:<ADP> los:<DET> zapatos:<NOUN> llenos:<ADJ> de:<ADP> barro:<NOUN> .:<PUNCT> 
# analyses = 101
# parsetree = (Utt (Utt (NP (NP (NP (Pron Yo)) (SC (QS (cop era) (neg solamente) (NP (NP (Det un) (CN (N chico))) (NP_obl (Prep con) (NP (Det los) (CN (N zapatos))))) (Comp (AP (A llenos)))))) (NP_obl (Prep de) (NP (CN (N barro)))))) (Punct '.'))
1	Yo	_	PRON	_	_	0	root	_	_
2	era	_	AUX	_	_	9	cop	_	_
3	solamente	_	ADV	_	_	9	nsubj	_	_
4	un	_	DET	_	_	5	det	_	_
5	chico	_	NOUN	_	_	9	advmod	_	_
6	con	_	ADP	_	_	8	case	_	_
7	los	_	DET	_	_	8	det	_	_
8	zapatos	_	NOUN	_	_	5	nmod	_	_
9	llenos	_	ADJ	_	_	1	acl	_	_
10	de	_	ADP	_	_	11	case	_	_
11	barro	_	NOUN	_	_	1	nmod	_	_
12	.	_	PUNCT	_	_	1	punct	_	_



# text = La:<DET> policía:<NOUN> de:<ADP> tráfico:<NOUN> de:<ADP> Shenzhen:<PROPN> ya:<ADV> se:<PRON> ha:<AUX> decantado:<VERB> por:<ADP> multas:<NOUN> poco:<ADV> convencionales:<ADJ> con:<ADP> anterioridad:<NOUN> .:<PUNCT> 
# analyses = 3247
# parsetree = (Utt (Utt (S (NP (NP (Det La) (CN (N policía))) (NP_obl (Prep de) (NP (NP (CN (N tráfico))) (NP_obl (Prep de) (NP (NP (PN Shenzhen)) (SC (S_that (S (NP (Predet ya) (NP (Pron se))) (VP (aux ha)))))))))) (VP (V2 decantado) (NP_obl (Prep por) (NP (CN (CN (N multas)) (AP (AdA poco) (AP (AP (A convencionales)) (NP_obl (Prep con) (NP (CN (N anterioridad)))))))))))) (Punct '.'))
1	La	_	DET	_	_	2	det	_	_
2	policía	_	NOUN	_	_	10	nsubj	_	_
3	de	_	ADP	_	_	4	case	_	_
4	tráfico	_	NOUN	_	_	2	nmod	_	_
5	de	_	ADP	_	_	6	case	_	_
6	Shenzhen	_	PROPN	_	_	4	nmod	_	_
7	ya	_	ADV	_	_	8	det:predet	_	_
8	se	_	PRON	_	_	9	nsubj	_	_
9	ha	_	AUX	_	_	6	acl	_	_
10	decantado	_	VERB	_	_	0	root	_	_
11	por	_	ADP	_	_	12	case	_	_
12	multas	_	NOUN	_	_	10	obl	_	_
13	poco	_	ADV	_	_	14	advmod	_	_
14	convencionales	_	ADJ	_	_	12	amod	_	_
15	con	_	ADP	_	_	16	case	_	_
16	anterioridad	_	NOUN	_	_	14	nmod	_	_
17	.	_	PUNCT	_	_	10	punct	_	_



# text = El:<DET> estudio:<NOUN> de:<ADP> los:<DET> volcanes:<NOUN> se:<PRON> llama:<VERB> vulcanología:<NOUN> ,:<PUNCT> a:<ADP> veces:<NOUN> escrito:<VERB> volcanología:<NOUN> .:<PUNCT> 
# analyses = 498
# parsetree = (Utt (Utt (S (NP (NP (NP (Det El) (CN (N estudio))) (NP_obl (Prep de) (NP (NP (Det los) (CN (N volcanes))) (RS (RP se) (VP (V2 llama) (NP (CN (N vulcanología)))))))) (comma ',') (NP_obl (Prep a) (NP (CN (N veces))))) (VP (V2 escrito) (NP (CN (N volcanología)))))) (Punct '.'))
1	El	_	DET	_	_	2	det	_	_
2	estudio	_	NOUN	_	_	12	nsubj	_	_
3	de	_	ADP	_	_	5	case	_	_
4	los	_	DET	_	_	5	det	_	_
5	volcanes	_	NOUN	_	_	2	nmod	_	_
6	se	_	PRON	_	_	7	nsubj	_	_
7	llama	_	VERB	_	_	5	acl:relcl	_	_
8	vulcanología	_	NOUN	_	_	7	obj	_	_
9	,	_	PUNCT	_	_	2	punct	_	_
10	a	_	ADP	_	_	11	case	_	_
11	veces	_	NOUN	_	_	2	nmod	_	_
12	escrito	_	VERB	_	_	0	root	_	_
13	volcanología	_	NOUN	_	_	12	obj	_	_
14	.	_	PUNCT	_	_	12	punct	_	_



# text = Se:<PRON> llevó:<VERB> a:<ADP> cabo:<NOUN> a:<ADP> poca:<DET> distancia:<NOUN> de:<ADP> la:<DET> costa:<NOUN> mexicana:<ADJ> de:<ADP> abril:<PROPN> a:<ADP> junio:<PROPN> .:<PUNCT> 
# analyses = 1069
# parsetree = (Utt (Utt (S (NP (Pron Se)) (VP (V2 llevó) (NP (NP (Det a) (CN (N cabo))) (NP_obl (Prep a) (NP (NP (Det poca) (CN (N distancia))) (NP_obl (Prep de) (NP (Det la) (CN (CN (N costa)) (AP (AP (A mexicana)) (NP_obl (Prep de) (NP (NP (PN abril)) (NP_obl (Prep a) (NP (PN junio))))))))))))))) (Punct '.'))
1	Se	_	PRON	_	_	2	nsubj	_	_
2	llevó	_	VERB	_	_	0	root	_	_
3	a	_	DET	_	_	4	det	_	_
4	cabo	_	NOUN	_	_	2	obj	_	_
5	a	_	ADP	_	_	7	case	_	_
6	poca	_	DET	_	_	7	det	_	_
7	distancia	_	NOUN	_	_	4	nmod	_	_
8	de	_	ADP	_	_	10	case	_	_
9	la	_	DET	_	_	10	det	_	_
10	costa	_	NOUN	_	_	7	nmod	_	_
11	mexicana	_	ADJ	_	_	10	amod	_	_
12	de	_	ADP	_	_	13	case	_	_
13	abril	_	PROPN	_	_	11	nmod	_	_
14	a	_	ADP	_	_	15	case	_	_
15	junio	_	PROPN	_	_	13	nmod	_	_
16	.	_	PUNCT	_	_	2	punct	_	_



# text = ":<PUNCT> Su:<PRON> voz:<NOUN> se:<PRON> escuchó:<VERB> literalmente:<ADV> por:<ADP> todo:<DET> el:<DET> mundo:<NOUN> ,:<PUNCT> ":<PUNCT> dijo:<VERB> Leive:<PROPN> .:<PUNCT> 
# analyses = 0
# parsetree = (Chunks (NP_appos (Punct_appos '"') (NP (NP (NP (NP_poss (Pron_poss Su)) (CN (N voz))) (SC (S_that (S (NP (Pron se)) (VP (VP (V escuchó)) (Adv literalmente)))))) (NP_obl (Prep por) (NP (Det todo))))) (Utt (Utt (Utt (NP (Det el) (CN (N mundo)))) (Punct ',')) (Punct '"')) (Utt (Utt (Imp (VP (V2 dijo) (NP (PN Leive))))) (Punct '.')))
1	"	_	PUNCT	_	_	3	punct	_	_
2	Su	_	PRON	_	_	3	nmod:poss	_	_
3	voz	_	NOUN	_	_	13	dep	_	_
4	se	_	PRON	_	_	5	nsubj	_	_
5	escuchó	_	VERB	_	_	3	acl	_	_
6	literalmente	_	ADV	_	_	5	advmod	_	_
7	por	_	ADP	_	_	8	case	_	_
8	todo	_	DET	_	_	3	nmod	_	_
9	el	_	DET	_	_	10	det	_	_
10	mundo	_	NOUN	_	_	13	dep	_	_
11	,	_	PUNCT	_	_	10	punct	_	_
12	"	_	PUNCT	_	_	10	punct	_	_
13	dijo	_	VERB	_	_	0	root	_	_
14	Leive	_	PROPN	_	_	13	obj	_	_
15	.	_	PUNCT	_	_	13	punct	_	_



# text = Un:<DET> testigo:<NOUN> contó:<VERB> a:<ADP> la:<DET> policía:<NOUN> que:<SCONJ> la:<DET> víctima:<NOUN> había:<AUX> atacado:<VERB> al:<ADP> sospechoso:<NOUN> en:<ADP> abril:<PROPN> .:<PUNCT> 
# analyses = 10395
# parsetree = (Utt (Utt (S (NP (Det Un) (CN (N testigo))) (VP (V2 contó) (NP (NP (NP (Det a)) (SC (S_that (S (NP (NP (Det la) (CN (N policía))) (SC (S_that (that que) (S (NP (Det la) (CN (N víctima))) (VP (aux había)))))) (VP (V atacado)))))) (NP_obl (Prep al) (NP (NP (CN (N sospechoso))) (NP_obl (Prep en) (NP (PN abril))))))))) (Punct '.'))
1	Un	_	DET	_	_	2	det	_	_
2	testigo	_	NOUN	_	_	3	nsubj	_	_
3	contó	_	VERB	_	_	0	root	_	_
4	a	_	DET	_	_	3	obj	_	_
5	la	_	DET	_	_	6	det	_	_
6	policía	_	NOUN	_	_	11	nsubj	_	_
7	que	_	SCONJ	_	_	10	mark	_	_
8	la	_	DET	_	_	9	det	_	_
9	víctima	_	NOUN	_	_	10	nsubj	_	_
10	había	_	AUX	_	_	6	acl	_	_
11	atacado	_	VERB	_	_	4	acl	_	_
12	al	_	ADP	_	_	13	case	_	_
13	sospechoso	_	NOUN	_	_	4	nmod	_	_
14	en	_	ADP	_	_	15	case	_	_
15	abril	_	PROPN	_	_	13	nmod	_	_
16	.	_	PUNCT	_	_	3	punct	_	_



# text = Es:<AUX> más:<ADV> evidente:<ADJ> cuando:<ADV> el:<DET> nombre:<NOUN> de:<ADP> un:<DET> famoso:<NOUN> es:<VERB> bastante:<ADV> raro:<ADJ> a:<ADP> el:<DET> principio:<NOUN> .:<PUNCT> 
# analyses = 0
# parsetree = (Chunks (Imp (cop Es) (Comp (Comp (AP (AdA más) (AP (A evidente)))) (Adv cuando))) (S_front (S (NP (NP (Det el) (CN (N nombre))) (NP_obl (Prep de) (NP (Det un) (CN (N famoso))))) (VP (V2 es) (NP (CN (AP (AdA bastante) (AP (AP (A raro)) (NP_obl (Prep a) (NP (Det el))))) (CN (N principio)))))) (comma '.')))
1	Es	_	AUX	_	_	3	cop	_	_
2	más	_	ADV	_	_	3	advmod	_	_
3	evidente	_	ADJ	_	_	10	dep	_	_
4	cuando	_	ADV	_	_	3	advmod	_	_
5	el	_	DET	_	_	6	det	_	_
6	nombre	_	NOUN	_	_	10	nsubj	_	_
7	de	_	ADP	_	_	9	case	_	_
8	un	_	DET	_	_	9	det	_	_
9	famoso	_	NOUN	_	_	6	nmod	_	_
10	es	_	VERB	_	_	0	root	_	_
11	bastante	_	ADV	_	_	12	advmod	_	_
12	raro	_	ADJ	_	_	15	amod	_	_
13	a	_	ADP	_	_	14	case	_	_
14	el	_	DET	_	_	12	nmod	_	_
15	principio	_	NOUN	_	_	10	obj	_	_
16	.	_	PUNCT	_	_	10	punct	_	_



# text = Esto:<DET> no:<ADV> ha:<AUX> impedido:<VERB> que:<SCONJ> los:<DET> inversores:<NOUN> hayan:<AUX> acudido:<VERB> a:<ADP> depositar:<VERB> su:<PRON> dinero:<NOUN> en:<ADP> los:<DET> fondos:<NOUN> .:<PUNCT> 
# analyses = 19611
# parsetree = (Utt (Utt (S (NP (NP (Det Esto)) (SC (S_that (S (NP (Det no)) (VP (aux ha)))))) (VP (VS impedido) (S_that (that que) (S (NP (NP (Det los)) (SC (S_that (S (NP (CN (N inversores))) (VP (aux hayan)))))) (VP (V3 acudido) (NP (NP (Det a)) (VP_pass (V2 depositar))) (NP (NP (NP_poss (Pron_poss su)) (CN (N dinero))) (NP_obl (Prep en) (NP (Det los) (CN (N fondos))))))))))) (Punct '.'))
1	Esto	_	DET	_	_	4	nsubj	_	_
2	no	_	DET	_	_	3	nsubj	_	_
3	ha	_	AUX	_	_	1	acl	_	_
4	impedido	_	VERB	_	_	0	root	_	_
5	que	_	SCONJ	_	_	9	mark	_	_
6	los	_	DET	_	_	9	nsubj	_	_
7	inversores	_	NOUN	_	_	8	nsubj	_	_
8	hayan	_	AUX	_	_	6	acl	_	_
9	acudido	_	VERB	_	_	4	ccomp	_	_
10	a	_	DET	_	_	9	iobj	_	_
11	depositar	_	VERB	_	_	10	acl	_	_
12	su	_	PRON	_	_	13	nmod:poss	_	_
13	dinero	_	NOUN	_	_	9	obj	_	_
14	en	_	ADP	_	_	16	case	_	_
15	los	_	DET	_	_	16	det	_	_
16	fondos	_	NOUN	_	_	13	nmod	_	_
17	.	_	PUNCT	_	_	4	punct	_	_



# text = Esta:<DET> discordancia:<NOUN> entre:<ADP> los:<DET> datos:<NOUN> económicos:<ADJ> y:<CCONJ> la:<DET> retórica:<NOUN> política:<ADJ> es:<AUX> familiar:<ADJ> ,:<PUNCT> o:<CCONJ> debería:<AUX> ser:<AUX> lo:<PRON> .:<PUNCT> 
# analyses = 0
# parsetree = (Chunks (S_front (S (NP (NP (Det Esta) (CN (N discordancia))) (NP_obl (Prep entre) (NP (ListNP (NP (Det los) (CN (CN (N datos)) (AP (A económicos))))) (NP_conj (Conj y) (NP (Det la) (CN (CN (N retórica)) (AP (A política)))))))) (cop es) (Comp (AP (A familiar)))) (comma ',')) (Utt (Utt (Conj o) (Utt (Imp (do debería) (cop ser) (Comp (NP (Pron lo)))))) (Punct '.')))
1	Esta	_	DET	_	_	2	det	_	_
2	discordancia	_	NOUN	_	_	12	nsubj	_	_
3	entre	_	ADP	_	_	5	case	_	_
4	los	_	DET	_	_	5	det	_	_
5	datos	_	NOUN	_	_	2	nmod	_	_
6	económicos	_	ADJ	_	_	5	amod	_	_
7	y	_	CCONJ	_	_	9	cc	_	_
8	la	_	DET	_	_	9	det	_	_
9	retórica	_	NOUN	_	_	5	conj	_	_
10	política	_	ADJ	_	_	9	amod	_	_
11	es	_	AUX	_	_	12	cop	_	_
12	familiar	_	ADJ	_	_	17	dep	_	_
13	,	_	PUNCT	_	_	12	punct	_	_
14	o	_	CCONJ	_	_	17	cc	_	_
15	debería	_	AUX	_	_	17	aux	_	_
16	ser	_	AUX	_	_	17	cop	_	_
17	lo	_	PRON	_	_	0	root	_	_
18	.	_	PUNCT	_	_	17	punct	_	_



# text = El:<DET> estudio:<NOUN> de:<ADP> viabilidad:<NOUN> calcula:<VERB> que:<SCONJ> los:<DET> pasajeros:<NOUN> tardarían:<VERB> unos:<DET> cuatro:<NUM> minutos:<NOUN> en:<ADP> cruzar:<VERB> el:<DET> río:<NOUN> Potomac:<PROPN> en:<ADP> la:<DET> góndola:<NOUN> .:<PUNCT> 
# analyses = 1152
# parsetree = (Utt (Utt (S (NP (NP (Det El) (CN (N estudio))) (NP_obl (Prep de) (NP (CN (N viabilidad))))) (VP (VS calcula) (S_that (that que) (S (NP (NP (Det los)) (RS (NP (CN (N pasajeros))) (VPSlash (VP (V3 tardarían) (NP (Det unos)) (NP (Num (Card cuatro)) (NP (CN (N minutos))))) (Prep en)))) (VP (V3 cruzar) (NP (Det el)) (NP (NP (N río) (PN Potomac)) (NP_obl (Prep en) (NP (Det la) (CN (N góndola))))))))))) (Punct '.'))
1	El	_	DET	_	_	2	det	_	_
2	estudio	_	NOUN	_	_	5	nsubj	_	_
3	de	_	ADP	_	_	4	case	_	_
4	viabilidad	_	NOUN	_	_	2	nmod	_	_
5	calcula	_	VERB	_	_	0	root	_	_
6	que	_	SCONJ	_	_	14	mark	_	_
7	los	_	DET	_	_	14	nsubj	_	_
8	pasajeros	_	NOUN	_	_	9	nsubj	_	_
9	tardarían	_	VERB	_	_	7	acl:relcl	_	_
10	unos	_	DET	_	_	9	iobj	_	_
11	cuatro	_	NUM	_	_	12	nummod	_	_
12	minutos	_	NOUN	_	_	9	obj	_	_
13	en	_	ADP	_	_	9	case	_	_
14	cruzar	_	VERB	_	_	5	ccomp	_	_
15	el	_	DET	_	_	14	iobj	_	_
16	río	_	NOUN	_	_	14	obj	_	_
17	Potomac	_	PROPN	_	_	16	flat	_	_
18	en	_	ADP	_	_	20	case	_	_
19	la	_	DET	_	_	20	det	_	_
20	góndola	_	NOUN	_	_	16	nmod	_	_
21	.	_	PUNCT	_	_	5	punct	_	_



# text = colecionaba:<VERB> tarjetas:<NOUN> y:<CCONJ> las:<PRON> intercambiaba:<VERB> con:<ADP> los:<DET> otros:<DET> chicos:<NOUN> 
# analyses = 10
# parsetree = (Utt (Imp (VP (V3 colecionaba) (NP (NP (NP (ListNP (NP (CN (N tarjetas)))) (NP_conj (Conj y) (NP (Pron las)))) (VP_pass (V2 intercambiaba))) (NP_obl (Prep con) (NP (Det los)))) (NP (Det otros) (CN (N chicos))))))
1	colecionaba	_	VERB	_	_	0	root	_	_
2	tarjetas	_	NOUN	_	_	1	iobj	_	_
3	y	_	CCONJ	_	_	4	cc	_	_
4	las	_	PRON	_	_	2	conj	_	_
5	intercambiaba	_	VERB	_	_	2	acl	_	_
6	con	_	ADP	_	_	7	case	_	_
7	los	_	DET	_	_	2	nmod	_	_
8	otros	_	DET	_	_	9	det	_	_
9	chicos	_	NOUN	_	_	1	obj	_	_



# text = este:<DET> delito:<NOUN> conlleva:<VERB> una:<DET> pena:<NOUN> de:<ADP> cinco:<NUM> años:<NOUN> de:<ADP> prisión:<NOUN> 
# analyses = 184
# parsetree = (Utt (S (NP (Det este) (CN (N delito))) (VP (V2 conlleva) (NP (NP (Det una) (CN (N pena))) (NP_obl (Prep de) (NP (NP (Num (Card cinco)) (NP (CN (N años)))) (NP_obl (Prep de) (NP (CN (N prisión))))))))))
1	este	_	DET	_	_	2	det	_	_
2	delito	_	NOUN	_	_	3	nsubj	_	_
3	conlleva	_	VERB	_	_	0	root	_	_
4	una	_	DET	_	_	5	det	_	_
5	pena	_	NOUN	_	_	3	obj	_	_
6	de	_	ADP	_	_	8	case	_	_
7	cinco	_	NUM	_	_	8	nummod	_	_
8	años	_	NOUN	_	_	5	nmod	_	_
9	de	_	ADP	_	_	10	case	_	_
10	prisión	_	NOUN	_	_	8	nmod	_	_



# text = la:<DET> noticia:<NOUN> fue:<AUX> llevada:<VERB> a:<ADP> todos:<DET> los:<DET> pueblos:<NOUN> de:<ADP> la:<DET> provincia:<NOUN> 
# analyses = 0
# parsetree = (Chunks (Comp (NP (NP (NP (Det la)) (SC (S_that (S (NP (CN (N noticia))) (have fue) (VP (V llevada)))))) (NP_obl (Prep a) (NP (Det todos))))) (Comp (NP (NP (Det los) (CN (N pueblos))) (NP_obl (Prep de) (NP (Det la) (CN (N provincia)))))))
1	la	_	DET	_	_	8	dep	_	_
2	noticia	_	NOUN	_	_	4	nsubj	_	_
3	fue	_	AUX	_	_	4	aux	_	_
4	llevada	_	VERB	_	_	1	acl	_	_
5	a	_	ADP	_	_	6	case	_	_
6	todos	_	DET	_	_	1	nmod	_	_
7	los	_	DET	_	_	8	det	_	_
8	pueblos	_	NOUN	_	_	0	root	_	_
9	de	_	ADP	_	_	11	case	_	_
10	la	_	DET	_	_	11	det	_	_
11	provincia	_	NOUN	_	_	8	nmod	_	_



# text = llevo:<VERB> estos:<DET> pensamientos:<NOUN> en:<ADP> el:<DET> fondo:<NOUN> de:<ADP> mi:<PRON> mente:<NOUN> 
# analyses = 23
# parsetree = (Utt (Imp (VP (V2 llevo) (NP (NP (Det estos) (CN (N pensamientos))) (NP_obl (Prep en) (NP (NP (Det el) (CN (N fondo))) (NP_obl (Prep de) (NP (NP_poss (Pron_poss mi)) (CN (N mente))))))))))
1	llevo	_	VERB	_	_	0	root	_	_
2	estos	_	DET	_	_	3	det	_	_
3	pensamientos	_	NOUN	_	_	1	obj	_	_
4	en	_	ADP	_	_	6	case	_	_
5	el	_	DET	_	_	6	det	_	_
6	fondo	_	NOUN	_	_	3	nmod	_	_
7	de	_	ADP	_	_	9	case	_	_
8	mi	_	PRON	_	_	9	nmod:poss	_	_
9	mente	_	NOUN	_	_	6	nmod	_	_



# text = Adam:<PROPN> habría:<AUX> sido:<AUX> llevado:<VERB> a:<ADP> la:<DET> vida:<NOUN> eterna:<ADJ> 
# analyses = 19
# parsetree = (Utt (S (NP (PN Adam)) (aux habría) (have sido) (VP (V2 llevado) (NP_obl (Prep a) (NP (Det la) (CN (CN (N vida)) (AP (A eterna))))))))
1	Adam	_	PROPN	_	_	4	nsubj	_	_
2	habría	_	AUX	_	_	4	aux	_	_
3	sido	_	AUX	_	_	4	aux	_	_
4	llevado	_	VERB	_	_	0	root	_	_
5	a	_	ADP	_	_	7	case	_	_
6	la	_	DET	_	_	7	det	_	_
7	vida	_	NOUN	_	_	4	obl	_	_
8	eterna	_	ADJ	_	_	7	amod	_	_



# text = los:<DET> revestimientos:<NOUN> se:<PRON> habían:<AUX> podrido:<VERB> y:<CCONJ> tuvieron:<VERB> que:<ADP> ser:<AUX> reemplazados:<VERB> 
# analyses = 14
# parsetree = (Utt (S (SC (QS (IP (IDet los) (CN (N revestimientos))) (NP (Pron se)) (aux habían) (VPSlash (VP (ListVP (VP (V podrido))) (VP_conj (Conj y) (VP (V tuvieron)))) (Prep que)))) (cop ser) (VP_pass (V2 reemplazados))))
1	los	_	DET	_	_	2	det	_	_
2	revestimientos	_	NOUN	_	_	5	obj	_	_
3	se	_	PRON	_	_	5	nsubj	_	_
4	habían	_	AUX	_	_	5	aux	_	_
5	podrido	_	VERB	_	_	10	csubj:pass	_	_
6	y	_	CCONJ	_	_	7	cc	_	_
7	tuvieron	_	VERB	_	_	5	conj	_	_
8	que	_	ADP	_	_	5	case	_	_
9	ser	_	AUX	_	_	10	aux:pass	_	_
10	reemplazados	_	VERB	_	_	0	root	_	_



# text = estaba:<AUX> indignada:<ADJ> de:<ADP> que:<ADP> esta:<DET> chica:<NOUN> se:<PRON> atrevía:<VERB> a:<PART> burlarse:<VERB> de:<ADP> ella:<PRON> delante:<ADV> de:<ADP> la:<DET> clase:<NOUN> 
# analyses = 0
# parsetree = (Chunks (Imp (cop estaba) (Comp (AP (A indignada)))) (Prep de) (Comp (NP_obl (Prep que) (NP (NP (NP (Det esta)) (SC (S_that (S (NP (NP (CN (N chica))) (SC (S_that (S (NP (Pron se)) (VP (V2 atrevía) (NP (Det a))))))) (VP (VP (V2 burlarse) (NP_obl (Prep de) (NP (Pron ella)))) (Adv delante)))))) (NP_obl (Prep de) (NP (Det la) (CN (N clase))))))))
1	estaba	_	AUX	_	_	2	cop	_	_
2	indignada	_	ADJ	_	_	5	dep	_	_
3	de	_	ADP	_	_	5	dep	_	_
4	que	_	ADP	_	_	5	case	_	_
5	esta	_	DET	_	_	0	root	_	_
6	chica	_	NOUN	_	_	10	nsubj	_	_
7	se	_	PRON	_	_	8	nsubj	_	_
8	atrevía	_	VERB	_	_	6	acl	_	_
9	a	_	DET	_	_	8	obj	_	_
10	burlarse	_	VERB	_	_	5	acl	_	_
11	de	_	ADP	_	_	12	case	_	_
12	ella	_	PRON	_	_	10	obl	_	_
13	delante	_	ADV	_	_	10	advmod	_	_
14	de	_	ADP	_	_	16	case	_	_
15	la	_	DET	_	_	16	det	_	_
16	clase	_	NOUN	_	_	5	nmod	_	_



# text = la:<DET> avalancha:<NOUN> que:<PRON> tuvo:<VERB> en:<ADP> el:<DET> colegio:<NOUN> electoral:<ADJ> oscureció:<VERB> la:<DET> estrechez:<NOUN> de:<ADP> una:<DET> victoria:<NOUN> basada:<VERB> en:<ADP> sólo:<ADV> el:<DET> 43%:<NUM> de:<ADP> el:<DET> voto:<NOUN> popular:<ADJ> 
# analyses = 19600
# parsetree = (Utt (S (NP (NP (NP (Det la) (CN (N avalancha))) (SC (S_that (S (NP (Pron que)) (VP (V tuvo)))))) (NP_obl (Prep en) (NP (Det el) (CN (CN (N colegio)) (AP (A electoral)))))) (VP (V3 oscureció) (NP (NP (Det la) (CN (N estrechez))) (NP_obl (Prep de) (NP (NP (NP (Det una)) (SC (S_that (S (NP (CN (N victoria))) (VP (V basada)))))) (NP_obl (Prep en) (NP (Predet sólo) (NP (Det el))))))) (NP (NP (Num (Card '43%'))) (NP_obl (Prep de) (NP (Det el) (CN (CN (N voto)) (AP (A popular)))))))))
1	la	_	DET	_	_	2	det	_	_
2	avalancha	_	NOUN	_	_	9	nsubj	_	_
3	que	_	PRON	_	_	4	nsubj	_	_
4	tuvo	_	VERB	_	_	2	acl	_	_
5	en	_	ADP	_	_	7	case	_	_
6	el	_	DET	_	_	7	det	_	_
7	colegio	_	NOUN	_	_	2	nmod	_	_
8	electoral	_	ADJ	_	_	7	amod	_	_
9	oscureció	_	VERB	_	_	0	root	_	_
10	la	_	DET	_	_	11	det	_	_
11	estrechez	_	NOUN	_	_	9	iobj	_	_
12	de	_	ADP	_	_	13	case	_	_
13	una	_	DET	_	_	11	nmod	_	_
14	victoria	_	NOUN	_	_	15	nsubj	_	_
15	basada	_	VERB	_	_	13	acl	_	_
16	en	_	ADP	_	_	18	case	_	_
17	sólo	_	ADV	_	_	18	det:predet	_	_
18	el	_	DET	_	_	13	nmod	_	_
19	43%	_	NUM	_	_	9	obj	_	_
20	de	_	ADP	_	_	22	case	_	_
21	el	_	DET	_	_	22	det	_	_
22	voto	_	NOUN	_	_	19	nmod	_	_
23	popular	_	ADJ	_	_	22	amod	_	_



# text = Las:<DET> tropas:<NOUN> estadounidenses:<ADJ> ahora:<ADV> llevan:<VERB> atropina:<NOUN> y:<CCONJ> autoinyectores:<NOUN> en:<ADP> sus:<PRON> equipos:<NOUN> de:<ADP> primeros:<ADJ> auxilios:<NOUN> para:<ADP> utilizar:<VERB> los:<DET> en:<ADP> caso:<NOUN> de:<ADP> intoxicación:<NOUN> por:<ADP> agentes:<NOUN> nerviosos:<ADJ> organofosforados:<ADJ> 
# analyses = 494
# parsetree = (Utt (S (NP (NP (Det Las)) (RS (NP (CN (CN (N tropas)) (AP (A estadounidenses)))) (VPSlash (VP (AdV ahora) (VP (V2 llevan) (NP (NP (ListNP (NP (CN (N atropina)))) (NP_conj (Conj y) (NP (CN (N autoinyectores))))) (NP_obl (Prep en) (NP (NP (NP_poss (Pron_poss sus)) (CN (N equipos))) (NP_obl (Prep de) (NP (CN (AP (A primeros)) (CN (N auxilios)))))))))) (Prep para)))) (VP (V2 utilizar) (NP (NP (Det los)) (NP_obl (Prep en) (NP (NP (CN (N caso))) (NP_obl (Prep de) (NP (NP (CN (N intoxicación))) (NP_obl (Prep por) (NP (CN (CN (CN (N agentes)) (AP (A nerviosos))) (AP (A organofosforados)))))))))))))
1	Las	_	DET	_	_	16	nsubj	_	_
2	tropas	_	NOUN	_	_	5	nsubj	_	_
3	estadounidenses	_	ADJ	_	_	2	amod	_	_
4	ahora	_	ADV	_	_	5	advmod	_	_
5	llevan	_	VERB	_	_	1	acl:relcl	_	_
6	atropina	_	NOUN	_	_	5	obj	_	_
7	y	_	CCONJ	_	_	8	cc	_	_
8	autoinyectores	_	NOUN	_	_	6	conj	_	_
9	en	_	ADP	_	_	11	case	_	_
10	sus	_	PRON	_	_	11	nmod:poss	_	_
11	equipos	_	NOUN	_	_	6	nmod	_	_
12	de	_	ADP	_	_	14	case	_	_
13	primeros	_	ADJ	_	_	14	amod	_	_
14	auxilios	_	NOUN	_	_	11	nmod	_	_
15	para	_	ADP	_	_	5	case	_	_
16	utilizar	_	VERB	_	_	0	root	_	_
17	los	_	DET	_	_	16	obj	_	_
18	en	_	ADP	_	_	19	case	_	_
19	caso	_	NOUN	_	_	17	nmod	_	_
20	de	_	ADP	_	_	21	case	_	_
21	intoxicación	_	NOUN	_	_	19	nmod	_	_
22	por	_	ADP	_	_	23	case	_	_
23	agentes	_	NOUN	_	_	21	nmod	_	_
24	nerviosos	_	ADJ	_	_	23	amod	_	_
25	organofosforados	_	ADJ	_	_	23	amod	_	_



# text = a:<ADP> largo:<ADJ> plazo:<NOUN> ,:<PUNCT> podrìa:<AUX> lograr:<VERB> mediante:<ADP> la:<DET> destreza:<NOUN> lo:<PRON> que:<PRON> no:<ADV> puede:<AUX> hacer:<VERB> a:<ADP> corto:<ADJ> plazo:<NOUN> mediante:<ADP> la:<DET> fuerza:<NOUN> y:<CCONJ> la:<DET> violencia:<NOUN> 
# analyses = 599
# parsetree = (Utt (NP_obl (Prep a) (NP (CN (AP (A largo)) (CN (N plazo))))) (comma ',') (Utt (Imp (do podrìa) (VP (V2 lograr) (NP_obl (Prep mediante) (NP (NP (NP (Det la) (CN (N destreza))) (SC (S_that (S (NP (NP (Pron lo)) (SC (S_that (S (NP (Pron que)) (VP (AdV no) (VP (aux puede))))))) (VP (V hacer)))))) (NP_obl (Prep a) (NP (NP (CN (AP (A corto)) (CN (N plazo)))) (NP_obl (Prep mediante) (NP (ListNP (NP (Det la) (CN (N fuerza)))) (NP_conj (Conj y) (NP (Det la) (CN (N violencia))))))))))))))
1	a	_	ADP	_	_	3	case	_	_
2	largo	_	ADJ	_	_	3	amod	_	_
3	plazo	_	NOUN	_	_	6	cc	_	_
4	,	_	PUNCT	_	_	6	punct	_	_
5	podrìa	_	AUX	_	_	6	aux	_	_
6	lograr	_	VERB	_	_	0	root	_	_
7	mediante	_	ADP	_	_	9	case	_	_
8	la	_	DET	_	_	9	det	_	_
9	destreza	_	NOUN	_	_	6	obl	_	_
10	lo	_	PRON	_	_	14	nsubj	_	_
11	que	_	PRON	_	_	13	nsubj	_	_
12	no	_	ADV	_	_	13	advmod	_	_
13	puede	_	AUX	_	_	10	acl	_	_
14	hacer	_	VERB	_	_	9	acl	_	_
15	a	_	ADP	_	_	17	case	_	_
16	corto	_	ADJ	_	_	17	amod	_	_
17	plazo	_	NOUN	_	_	9	nmod	_	_
18	mediante	_	ADP	_	_	20	case	_	_
19	la	_	DET	_	_	20	det	_	_
20	fuerza	_	NOUN	_	_	17	nmod	_	_
21	y	_	CCONJ	_	_	23	cc	_	_
22	la	_	DET	_	_	23	det	_	_
23	violencia	_	NOUN	_	_	20	conj	_	_



# text = ha:<AUX> sido:<AUX> dicho:<VERB> que:<SCONJ> sólo:<ADV> una:<DET> sociedad:<NOUN> jerárquica:<ADJ> dominada:<VERB> por:<ADP> una:<DET> clase:<NOUN> ociosa:<ADJ> puede:<AUX> producir:<VERB> obras:<NOUN> de:<ADP> arte:<NOUN> 
# analyses = 0
# parsetree = (Chunks (Imp (do ha) (VP (aux sido))) (Imp (VP (VS dicho) (S_that (that que) (S (NP (Predet sólo) (NP (Det una) (CN (CN (N sociedad)) (AP (A jerárquica))))) (VP (V2 dominada) (NP_obl (Prep por) (NP (NP (NP (Det una)) (SC (S_that (S (NP (CN (CN (N clase)) (AP (A ociosa)))) (have puede) (VP (V2 producir) (NP (CN (N obras)))))))) (NP_obl (Prep de) (NP (CN (N arte))))))))))))
1	ha	_	AUX	_	_	2	aux	_	_
2	sido	_	AUX	_	_	3	dep	_	_
3	dicho	_	VERB	_	_	0	root	_	_
4	que	_	SCONJ	_	_	9	mark	_	_
5	sólo	_	ADV	_	_	7	det:predet	_	_
6	una	_	DET	_	_	7	det	_	_
7	sociedad	_	NOUN	_	_	9	nsubj	_	_
8	jerárquica	_	ADJ	_	_	7	amod	_	_
9	dominada	_	VERB	_	_	3	ccomp	_	_
10	por	_	ADP	_	_	11	case	_	_
11	una	_	DET	_	_	9	obl	_	_
12	clase	_	NOUN	_	_	15	nsubj	_	_
13	ociosa	_	ADJ	_	_	12	amod	_	_
14	puede	_	AUX	_	_	15	aux	_	_
15	producir	_	VERB	_	_	11	acl	_	_
16	obras	_	NOUN	_	_	15	obj	_	_
17	de	_	ADP	_	_	18	case	_	_
18	arte	_	NOUN	_	_	11	nmod	_	_



# text = su:<PRON> ingenua:<ADJ> explicación:<NOUN> de:<ADP> que:<SCONJ> no:<ADV> habría:<AUX> quemado:<VERB> la:<DET> iglesia:<NOUN> si:<SCONJ> no:<ADV> hubiera:<AUX> pensado:<VERB> que:<SCONJ> el:<DET> obispo:<NOUN> estaba:<VERB> allí:<ADV> 
# analyses = 0
# parsetree = (Chunks (Comp (NP (NP_poss (Pron_poss su)) (CN (AP (A ingenua)) (CN (N explicación))))) (Prep de) (ListS (S (SC (S_that (that que) (S (NP (Det no)) (VP (aux habría))))) (VP (V2 quemado) (NP (NP (Det la)) (SC (S_that (S (NP (NP (CN (N iglesia))) (SC (S_that (that si) (S (NP (Det no)) (VP (aux hubiera)))))) (VP (VS pensado) (S_that (that que) (S (NP (Det el) (CN (N obispo))) (VP (VP (V estaba)) (Adv allí)))))))))))))
1	su	_	PRON	_	_	3	nmod:poss	_	_
2	ingenua	_	ADJ	_	_	3	amod	_	_
3	explicación	_	NOUN	_	_	8	dep	_	_
4	de	_	ADP	_	_	8	dep	_	_
5	que	_	SCONJ	_	_	7	mark	_	_
6	no	_	DET	_	_	7	nsubj	_	_
7	habría	_	AUX	_	_	8	csubj	_	_
8	quemado	_	VERB	_	_	0	root	_	_
9	la	_	DET	_	_	8	obj	_	_
10	iglesia	_	NOUN	_	_	14	nsubj	_	_
11	si	_	SCONJ	_	_	13	mark	_	_
12	no	_	DET	_	_	13	nsubj	_	_
13	hubiera	_	AUX	_	_	10	acl	_	_
14	pensado	_	VERB	_	_	9	acl	_	_
15	que	_	SCONJ	_	_	18	mark	_	_
16	el	_	DET	_	_	17	det	_	_
17	obispo	_	NOUN	_	_	18	nsubj	_	_
18	estaba	_	VERB	_	_	14	ccomp	_	_
19	allí	_	ADV	_	_	18	advmod	_	_



